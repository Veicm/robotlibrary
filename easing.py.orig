import math
from robotlibrary.servo import Servo
from time import sleep_ms
from collections import deque
import gc
START=0
STOP=2

<<<<<<< HEAD
def get_steps(start, stop, d_angle):
    '''Calculates the necessary steps for the given angle d_angle to make a smooth movement.
    :param start: 0
    :param stop: 0
    :d_angle: The angle the sensor shall move. '''
    gc.enable()
    gc.collect()
    #print(d_angle)
    increment = stop/d_angle #This is one way to determine the increment. Others are better.
    #The bigger the angle, the smaller the increment is noch a good idea.
    # Another possibility: increment = d_angle/100
    i = start
    steps = list()
    sum_steps = 0
    while i < stop-increment:
        sum_steps = sum_steps + ease_in_out_sine(i)
        #print(f"i: {i}, Ease: {ease_in_out_sine(i)}")
        
        i=i+increment
    #print(sum_steps)
    i = start
    while i < stop-increment:
        #sum_steps = sum_steps+ ease_in_out_sine(i)
        #print(f"i: {i}, Ease: {ease_in_out_sine(i)}")
        steps.append(_ease_in_out_sine(i)*d_angle/sum_steps)
        i=i+increment
    d = deque((),len(steps))
    for s in steps:
        d.append(s)
    return s
=======
def get_step(step,steps,factor):
    '''param: step: step number
    param: steps: number of steps for the whole movement
    param: factor: '''
    return _ease_in_out_sine(step*get_increment(steps))*factor

def get_factor(steps, angle):
    increment = STOP/steps
    i=0
    s_sum=0
    while i < STOP:
        #print(f"ZÃ¤hler: {i}, {_ease_in_out_sine(i)}")
        s_sum+=_ease_in_out_sine(i)
        i+=increment
    return angle/s_sum

def get_increment(steps):
    return STOP/steps 
>>>>>>> eased_movement

def _ease_in_out_quad(t: float) -> float:
        t *= 2
        if t < 1:
            return 0.5 * t * t
        t -= 1
        return -0.5 * (t * (t - 2) - 1)
    
def _ease_in_out_sine(t: float) -> float:
        return round(abs(-0.5 * (math.cos(math.pi * t) - 1)),2)


def main():    
    pass

if __name__ == "__main__":
    # execute only if run as a script
    main()

